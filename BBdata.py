# -*- coding: utf-8 -*-### Importsimport os, time, sysfrom PIL import Imagefrom PIL import ImageFilterfrom PIL import ImageEnhancenames = locals()### Functionsdef continus(d:list,x=True) -> list:    l=[]    s=set()    end=False    for i in range(len(d)-1):        if d[i+1]==d[i]+1:            s.add(d[i])            s.add(d[i]+1)            end=True            if d[i+1]==d[-1]:                if d[i]==d[i+1]-1:                    s.add(d[i+1])                    l.append(sorted(s))                    s.clear()        else:            if x and i+15 in range(len(d)-1) and (d[i]+15) in d:                s.add(d[i]+15)                end=False            if end:                l.append(sorted(s))                s.clear()                end=False    return l           def get_bar(Image,name,x=True):    "get several areas which contain one bar of characters from the given area."    count=[]    x1=0    y1=0    x2,y2=Image.size    bars=[]    for i in range(x1,x2):        for j in range (y1,y2):            if Image.getpixel((i,j))==0:                count.append(i)                break      for i in range(len(continus(count,x))):        x1,x2=(continus(count,x)[i][0],continus(count,x)[i][-1])        names['%s%s' % (name,(i+1))]=Image.crop((x1,y1,x2+1,y2))        bars.append('%s%s' % (name,(i+1)))    return barsdef get_num(Image,name,fold):    "get the areas which contain one number each from the given bar."    count=[]    x1=0    y1=0    x2,y2=Image.size    for i in range(y1,y2):        for j in range (x1,x2):            if Image.getpixel((j,i))==0:                count.append(i)                break    numbers=[]    for i in range(len(continus(count,False))):        y1,y2=(continus(count,False)[i][0],continus(count,False)[i][-1])        names['Fold%s%s%s' % (fold,name,(i+1))]=Image.crop((x1,y1,x2,y2+1))        #names['Fold%s%s%s' % (fold,name,(i+1))].save('Fold%s%s%s.png' % (fold,name,(i+1)))        numbers.append('Fold%s%s%s' % (fold,name,(i+1)))    return numbersdef range_of_similarity(s,d,n):    return (s-n*d,s+n*d)def similarity(s,a,b,c,d,e):    A=[]    B=[]    C=[]    D=[]    for x in range(ord('A'),ord('D')+1):        for y in range (5):            eval(chr(x)).append([])            for z in range(10):                eval(chr(x))[y].append(s[y] >= (range_of_similarity(eval(chr(y+97))[0][z],eval(chr(y+97))[1][z],(1+(x-65)/2))[0]) and s[y] <= (range_of_similarity(eval(chr(y+97))[0][z],eval(chr(y+97))[1][z],(1+(x-65)/2))[1]))    return(A,B,C,D)def get_value(s):    ave=[88.9,148.7,152.3,134.8,162.2,177.9,135.0,190.0,177.9,174.6]    sd=[0.9,4.2,3.4,2.2,4.6,6.0,4.9,4.3,3.6,3.5]    ave1=[13.8,23.1,30.0,23.8,48.3,47.1,34.9,44.0,45.2,41.6]    sd1=[1.1,1.5,3.3,1.4,4.3,3.3,3.1,2.7,3.0,2.3]    ave2=[0.0,37.8,28.5,34.6,29.3,49.6,27.3,50.7,37.0,43.8]    sd2=[0.0,1.5,1.8,2.5,1.5,1.3,2.3,1.5,1.8,1.6]    ave3=[35.1,44.3,44.3,24.8,34.7,33.0,53.1,44.3,45.2,43.3]     sd3=[0.8,1.9,2.4,2.4,2.9,3.9,2.4,1.9,2.2,1.6]    ave4=[40.0,43.5,49.6,51.6,49.8,48.3,19.7,51.0,50.6,45.9]    sd4=[0.0,1.7,1.9,0.6,2.2,1.5,2.4,2.5,2.5,1.6]    S=similarity(s,(ave,sd),(ave1,sd1),(ave2,sd2),(ave3,sd3),(ave4,sd4))    x=[]    result=0    for n in range(10):        mutiply=0        for i in range (4):            k=0            for m in range (10):                add=0                for j in range(5):                    add +=(S[i][j][n])                k=add            mutiply+= k*(10**i)        x.append(mutiply)    for i in range(10):        if i==0:            result=1        elif x[i]>x[result-1]:            result=(i+1)%10    return resultdef get_code(Image):    "get the code of given image"    num=''    x1=0    y1=0    x2,y2= Image.size    for i in range(y1,y2):        for j in range(x1,x2):            if Image.getpixel((j,i))==0:                b=i                break        if Image.getpixel((j,i))==0:            break    for i in range(x1,x2):        for j in range(b,y2):            if Image.getpixel((i,j))==0:                a=i                break        if Image.getpixel((i,j))==0:            break    for i in range(x2-1,x1,-1):        for j in range(y2-1,b,-1):            if Image.getpixel((i,j))==0:                c=i+1                break        if Image.getpixel((i,j))==0:            break    for i in range(y2-1,y1,-1):        for j in range(x2-1,x1,-1):            if Image.getpixel((j,i))==0:                d=i+1                break        if Image.getpixel((j,i))==0:            break    value=0    value1=0    value2=0    value3=0    value4=0    array=[]    for i in range(d-b):        array.append([])        for j in range(c-a):            if Image.getpixel((j,i))<255:                t=1            else:                t=0            array[i].append(t)                        value += t            num += str(t)        num +='\n'    #print(num)    for i in range(len(array)//2):        for j in range(len(array[i])//2):            value1 += array[i][j]    for i in range(len(array)//2,len(array)):        for j in range(len(array[i])//2):            value2 += array[i][j]    for i in range(len(array)//2):        for j in range(len(array[i])//2,len(array[i])):            value3 += array[i][j]    for i in range(len(array)//2,len(array)):        for j in range(len(array[i])//2,len(array[i])):            value4 += array[i][j]    return (value,value1,value2,value3,value4)def write_to_file(L,pic):    with open('data'+pic+'.txt','w') as file:        file.writelines(L)def Main(pic):    ### Prepare the image    im = Image.open(pic)    im = ImageEnhance.Contrast(im).enhance(20).convert('L')    im = ImageEnhance.Sharpness(im).enhance(2)    if int(pic[0])>2:        im = im.crop((600,430,1500,1095))    else:        im = im.crop((1705,500,1800,1114))    im.save('new.png')    ### Main Program    print('-----starting analyzing '+pic+'-----')    #print('Starting bar cropping......\r')    get_bar(im,'bar')    #print('bar cropping is done\r')    s=[]    #print('Starting numbers analyze......\r')    for i in range(len(get_bar(im,'bar'))):         get_num(names['bar%s' % str(i+1)],'num',str(i+1))        d=get_num(names['bar%s' % str(i+1)],'num',str(i+1))        s.append(d)    #print('numbers analyze are done\r')    #print('Starting value analyze......\r')    L=[]    for i in range(len(s)):        for j in range(len(s[i])):            number=0            s[i][j]=get_bar(eval(s[i][j]),'Fold%snum%sdigit' %(str(i+1),str(j+1)),False)            for x in range(len(s[i][j])):                t=eval(s[i][j][x])                k=get_value(get_code(t))                num=s[i][j][x]                m,n=t.size                if k==2:                    if t.getpixel((m-1,0))<255:                        num=1                    else:                        num=2                elif k==3:                                        if t.getpixel((m-1,n-1))<255:                        num=2                    elif t.getpixel((0,2))==255:                        num=4                    else:                        num=3                elif k==4:                    if t.getpixel((0,2))<255:                        num=5                    else:                        num=4                 elif k==5:                    if t.getpixel((1,2))==255:                        num=6                    else:                        num=5                elif k==6:                    if t.getpixel((0,2))<255:                        num=5                    elif t.getpixel((m//2,n//2))==255:                        num=0                    elif t.getpixel((m-1,n//2))<255:                        num=9                    else:                        num=6                         elif k==7:                    if t.getpixel((0,0))==255:                        num=3                    else:                        num=7                     elif k==8:                    if t.getpixel((m//2,n//2))==255:                        num=0                    elif t.getpixel((0,2))<255:                        num=5                    elif t.getpixel((m-1,n-1))<255:                        num=2                    elif t.getpixel((0,n//2))<255:                            num=6                    elif t.getpixel((0,n*3//4))==255:                        num=9                    else:                        num=8                   elif k==9:                      if t.getpixel((m//2,n//2))==255:                        num=0                    elif t.getpixel((0,2))<255:                        num=5                    else:                        num=9                else:                    num=k                number +=(num*(10**(len(s[i][j])-x-1)))            L.append(str(number)+'\n')        L.append('\n')    #print('value analyze is done\r')     #print('Writing into file......\r')               write_to_file(L,pic)    print(L)    #print('file has been written, please check')    print('-----Program Done-----')        return L     #Main('1.jpg')from PIL import Imageimport os, time, sysfrom PIL import Imagefrom PIL import ImageFilterfrom PIL import ImageEnhancenames = locals()im = Image.open('1.jpg')im = ImageEnhance.Contrast(im).enhance(20).convert('L')im = ImageEnhance.Sharpness(im).enhance(2)im = im.crop((1175,555,1225,600))im.save('new.png')from pytesseract import image_to_stringprint (image_to_string(im,  lang='chi_'))#print (image_to_string(im, lang='fra'))